/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/assert/assert.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack:///./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/util/util.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/client.js":
/*!***********************!*\
  !*** ./src/client.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Document = __webpack_require__(/*! ./teletype-crdt/lib/document */ \"./src/teletype-crdt/lib/document.js\");\nconst LocalDocument = __webpack_require__(/*! ./teletype-crdt/test/helpers/local-document */ \"./src/teletype-crdt/test/helpers/local-document.js\");\n\n/* @format\n *\n * Message Types\n *\n * ping - request the full state\n * pong - return the full state\n * insert - insert op\n * delete - delete op\n *\n */\n\nINIT = 'init';\nOPERATIONS = 'operations';\n\nconst channel = new BroadcastChannel('ops');\nvar latency = 300;\n\nvar timeout = 8 * latency;\n\nvar siteId = Math.floor(Math.random() * 9999999999);\nvar initialized = false;\n\nvar stateDisplay;\nvar doc;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function wait_latency() {\n  // Here we simulate the latency of a real server-client connection\n  await sleep(latency + Math.random() * latency);\n}\n\nfunction initialize() {\n  broadcast({\n    type: INIT,\n    siteId: siteId,\n  });\n  setTimeout(function() {\n    if (!initialized) {\n      initialized = true;\n      doc = buildDocument(siteId, 'Hello World');\n      stateDisplay.innerText = doc.getText();\n    }\n  }, timeout);\n}\n\nfunction buildDocument(siteId, text) {\n  const document = new Document({siteId, text});\n  // Do I need this?\n  document.localDocument = new LocalDocument(document.getText());\n  return document;\n}\n\nfunction updateDisplay() {\n  stateDisplay.innerText = doc.getText();\n}\n\nfunction performInsert(pos, text) {\n  pos = {row: 0, column: pos};\n  op = performSetTextInRange(pos, pos, text);\n  updateDisplay();\n  return op;\n}\n\nfunction performDelete(pos, text) {\n  start = {row: 0, column: pos};\n  end = {row: 0, column: pos + 1};\n  op = performSetTextInRange(start, end, '');\n  updateDisplay();\n  return op;\n}\n\nfunction performSetTextInRange(start, end, text, options) {\n  return doc.setTextInRange(start, end, text, options);\n}\n\nfunction integrateOperations(operations) {\n  if (!initialized) {\n    doc = new Document({siteId});\n    initialized = true;\n  }\n  doc.integrateOperations(operations);\n  updateDisplay();\n}\n\nasync function broadcast(msg) {\n  console.log('Broadcasting');\n  console.log(msg);\n  await wait_latency();\n  channel.postMessage(msg);\n}\n\nasync function receive(msg) {\n  msg = msg.data;\n  await wait_latency();\n  console.log('Received');\n  console.log(msg);\n  switch (msg.type) {\n    case INIT:\n      broadcast({\n        type: OPERATIONS,\n        operations: doc.getOperations(),\n      });\n      break;\n    case OPERATIONS:\n      integrateOperations(msg.operations);\n      break;\n    default:\n      break;\n  }\n}\n\nchannel.onmessage = receive;\n\nfunction insertOp(e) {\n  insertTextBox = document.getElementById('insert-text');\n  insertPosBox = document.getElementById('insert-pos');\n  text = insertTextBox.value;\n  pos = parseInt(insertPosBox.value);\n\n  msg = {\n    type: OPERATIONS,\n    operations: performInsert(pos, text),\n  };\n\n  broadcast(msg);\n}\n\nfunction deleteOp(e) {\n  deletePosBox = document.getElementById('delete-pos');\n  pos = parseInt(deletePosBox.value);\n\n  msg = {\n    type: OPERATIONS,\n    operations: performDelete(pos),\n  };\n\n  broadcast(msg);\n}\n\nfunction updateLatency(e) {\n  const slider = document.getElementById('latency-slider');\n  const displayTime = document.getElementById('time-value');\n  latency = parseInt(slider.value);\n  displayTime.innerText = slider.value;\n}\n\nwindow.onload = function() {\n  document.getElementById('insert-btn').onclick = insertOp;\n  document.getElementById('delete-btn').onclick = deleteOp;\n  stateDisplay = document.getElementById('state-display');\n  document.getElementById('latency-slider').onchange = updateLatency;\n\n  initialize();\n};\n\n\n//# sourceURL=webpack:///./src/client.js?");

/***/ }),

/***/ "./src/teletype-crdt/lib/document-tree.js":
/*!************************************************!*\
  !*** ./src/teletype-crdt/lib/document-tree.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const SplayTree = __webpack_require__(/*! ./splay-tree */ \"./src/teletype-crdt/lib/splay-tree.js\")\nconst {ZERO_POINT, compare, traverse} = __webpack_require__(/*! ./point-helpers */ \"./src/teletype-crdt/lib/point-helpers.js\")\n\nmodule.exports =\nclass DocumentTree extends SplayTree {\n  constructor (firstSegment, lastSegment, isSegmentVisible) {\n    super()\n    this.firstSegment = firstSegment\n    this.firstSegment.documentRight = lastSegment\n    this.firstSegment.documentRight.documentParent = this.firstSegment\n    this.firstSegment.documentLeft = null\n    this.firstSegment.documentSubtreeExtent = ZERO_POINT\n    lastSegment.documentSubtreeExtent = ZERO_POINT\n    this.root = this.firstSegment\n    this.isSegmentVisible = isSegmentVisible\n  }\n\n  getSegmentIndex (segment) {\n    let index = segment.documentLeft ? segment.documentLeft.documentSubtreeSize : 0\n\n    while (segment.documentParent) {\n      if (segment.documentParent.documentRight === segment) {\n        index++\n        if (segment.documentParent.documentLeft) {\n          index += segment.documentParent.documentLeft.documentSubtreeSize\n        }\n      }\n      segment = segment.documentParent\n    }\n\n    return index\n  }\n\n  getParent (node) {\n    return node.documentParent\n  }\n\n  setParent (node, value) {\n    node.documentParent = value\n  }\n\n  getLeft (node) {\n    return node.documentLeft\n  }\n\n  setLeft (node, value) {\n    node.documentLeft = value\n  }\n\n  getRight (node) {\n    return node.documentRight\n  }\n\n  setRight (node, value) {\n    node.documentRight = value\n  }\n\n  findSegmentContainingPosition (position) {\n    let segment = this.root\n    let leftAncestorEnd = ZERO_POINT\n    while (segment) {\n      let start = leftAncestorEnd\n      if (segment.documentLeft) start = traverse(start, segment.documentLeft.documentSubtreeExtent)\n      let end = start\n      if (this.isSegmentVisible(segment)) end = traverse(end, segment.extent)\n\n      if (compare(position, start) <= 0 && segment !== this.firstSegment) {\n        segment = segment.documentLeft\n      } else if (compare(position, end) > 0) {\n        leftAncestorEnd = end\n        segment = segment.documentRight\n      } else {\n        return {segment, start, end}\n      }\n    }\n\n    throw new Error('No segment found')\n  }\n\n  insertBetween (prev, next, newSegment) {\n    this.splayNode(prev)\n    this.splayNode(next)\n    this.root = newSegment\n    newSegment.documentLeft = prev\n    prev.documentParent = newSegment\n    newSegment.documentRight = next\n    next.documentParent = newSegment\n    next.documentLeft = null\n    this.updateSubtreeExtent(next)\n    this.updateSubtreeExtent(newSegment)\n  }\n\n  splitSegment (prefix, suffix) {\n    this.splayNode(prefix)\n\n    this.root = suffix\n    suffix.documentParent = null\n    suffix.documentLeft = prefix\n    prefix.documentParent = suffix\n    suffix.documentRight = prefix.documentRight\n    if (suffix.documentRight) suffix.documentRight.documentParent = suffix\n    prefix.documentRight = null\n\n    this.updateSubtreeExtent(prefix)\n    this.updateSubtreeExtent(suffix)\n  }\n\n  updateSubtreeExtent (node, undoCountOverrides) {\n    node.documentSubtreeExtent = ZERO_POINT\n    node.documentSubtreeSize = 1\n    if (node.documentLeft) {\n      node.documentSubtreeExtent = traverse(node.documentSubtreeExtent, node.documentLeft.documentSubtreeExtent)\n      node.documentSubtreeSize += node.documentLeft.documentSubtreeSize\n    }\n    if (this.isSegmentVisible(node, undoCountOverrides)) {\n      node.documentSubtreeExtent = traverse(node.documentSubtreeExtent, node.extent)\n    }\n    if (node.documentRight) {\n      node.documentSubtreeExtent = traverse(node.documentSubtreeExtent, node.documentRight.documentSubtreeExtent)\n      node.documentSubtreeSize += node.documentRight.documentSubtreeSize\n    }\n  }\n\n  getSegmentPosition (segment) {\n    this.splayNode(segment)\n    if (segment.documentLeft) {\n      return segment.documentLeft.documentSubtreeExtent\n    } else {\n      return ZERO_POINT\n    }\n  }\n\n  getSegments () {\n    const treeSegments = []\n    function visitTreeInOrder (node) {\n      if (node.documentLeft) visitTreeInOrder(node.documentLeft)\n      treeSegments.push(node)\n      if (node.documentRight) visitTreeInOrder(node.documentRight)\n    }\n    visitTreeInOrder(this.root)\n    return treeSegments\n  }\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/lib/document-tree.js?");

/***/ }),

/***/ "./src/teletype-crdt/lib/document.js":
/*!*******************************************!*\
  !*** ./src/teletype-crdt/lib/document.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const assert = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\")\nconst DocumentTree = __webpack_require__(/*! ./document-tree */ \"./src/teletype-crdt/lib/document-tree.js\")\nconst SplitTree = __webpack_require__(/*! ./split-tree */ \"./src/teletype-crdt/lib/split-tree.js\")\nconst {ZERO_POINT, compare, traverse, traversal, extentForText} = __webpack_require__(/*! ./point-helpers */ \"./src/teletype-crdt/lib/point-helpers.js\")\n\nmodule.exports =\nclass Document {\n  constructor ({siteId, text, history}) {\n    assert(siteId !== 0, 'siteId 0 is reserved')\n    this.siteId = siteId\n    this.nextSequenceNumber = 1\n    this.splitTreesBySpliceId = new Map()\n    this.deletionsBySpliceId = new Map()\n    this.undoCountsBySpliceId = new Map()\n    this.markerLayersBySiteId = new Map([[this.siteId, new Map()]])\n    this.deferredOperationsByDependencyId = new Map()\n    this.deferredResolutionsByDependencyId = new Map()\n    this.deferredMarkerUpdates = new Map()\n    this.deferredMarkerUpdatesByDependencyId = new Map()\n    this.maxSeqsBySite = {}\n    this.operations = []\n    this.undoStack = []\n    this.redoStack = []\n    this.nextCheckpointId = 1\n\n    const firstSegment = {spliceId: {site: 0, seq: 0}, offset: ZERO_POINT, text: '', extent: ZERO_POINT, nextSplit: null, deletions: new Set()}\n    this.splitTreesBySpliceId.set(spliceIdToString(firstSegment.spliceId), new SplitTree(firstSegment))\n\n    const lastSegment = {spliceId: {site: 0, seq: 1}, offset: ZERO_POINT, text: '', extent: ZERO_POINT, nextSplit: null, deletions: new Set()}\n    this.splitTreesBySpliceId.set(spliceIdToString(lastSegment.spliceId), new SplitTree(lastSegment))\n\n    this.documentTree = new DocumentTree(\n      firstSegment,\n      lastSegment,\n      this.isSegmentVisible.bind(this)\n    )\n\n    if (text) {\n      this.setTextInRange(ZERO_POINT, ZERO_POINT, text)\n      this.undoStack.length = 0\n    } else if (history) {\n      this.populateHistory(history)\n    }\n  }\n\n  populateHistory ({baseText, nextCheckpointId, undoStack, redoStack}) {\n    this.setTextInRange(ZERO_POINT, ZERO_POINT, baseText)\n    this.nextCheckpointId = nextCheckpointId\n\n    const newUndoStack = []\n    const allEntries = undoStack.concat(redoStack.slice().reverse())\n    for (let i = 0; i < allEntries.length; i++) {\n      const {type, changes, markersBefore, markersAfter, id, markers} = allEntries[i]\n      if (type === 'transaction') {\n        const operations = []\n        const markersSnapshotBefore = this.snapshotFromMarkers(markersBefore)\n        for (let j = changes.length - 1; j >= 0; j--) {\n          const {oldStart, oldEnd, newText} = changes[j]\n          operations.push(...this.setTextInRange(oldStart, oldEnd, newText))\n        }\n        const markersSnapshotAfter = this.snapshotFromMarkers(markersAfter)\n        newUndoStack.push(new Transaction(0, operations, markersSnapshotBefore, markersSnapshotAfter))\n      } else if (type === 'checkpoint') {\n        newUndoStack.push(new Checkpoint(id, false, this.snapshotFromMarkers(markers)))\n      } else {\n        throw new Error(`Unknown entry type '${type}'`)\n      }\n    }\n\n    this.undoStack = newUndoStack\n    for (let i = 0; i < redoStack.length; i++) {\n      if (redoStack[i].type === 'transaction') this.undo()\n    }\n  }\n\n  replicate (siteId) {\n    const replica = new Document({siteId})\n    replica.integrateOperations(this.getOperations())\n    return replica\n  }\n\n  /*\n  Public: Gets all the operations that have been integrated in the document.\n\n  Returns an {Array} of text operations and marker update operations.\n  */\n  getOperations () {\n    const markerOperations = []\n    this.markerLayersBySiteId.forEach((layersById, siteId) => {\n      const siteMarkerLayers = {}\n      layersById.forEach((markersById, layerId) => {\n        const layer = {}\n        markersById.forEach((marker, markerId) => {\n          layer[markerId] = marker\n        })\n        siteMarkerLayers[layerId] = layer\n      })\n\n      markerOperations.push({\n        type: 'markers-update',\n        updates: siteMarkerLayers,\n        siteId\n      })\n    })\n\n    return this.operations.concat(markerOperations)\n  }\n\n  /*\n  Public: Replaces the (possibly empty) range identified by `start` and `end`\n  with the specified `text`.\n\n  * `start` Point {Object}\n  * `end` Point {Object}\n  * `text` {String}\n\n  Returns an {Array} containing the integrated operation.\n  */\n  setTextInRange (start, end, text) {\n    const spliceId = {site: this.siteId, seq: this.nextSequenceNumber}\n    const operation = {type: 'splice', spliceId}\n\n    if (compare(end, start) > 0) {\n      operation.deletion = this.delete(spliceId, start, end)\n    }\n    if (text && text.length > 0) {\n      operation.insertion = this.insert(spliceId, start, text)\n    }\n    this.updateMaxSeqsBySite(spliceId)\n\n    this.undoStack.push(new Transaction(this.getNow(), [operation]))\n    this.clearRedoStack()\n\n    this.operations.push(operation)\n    return [operation]\n  }\n\n  /*\n  Public: Gets all the markers currently available on this Document.\n\n  Returns an {Object} of shape:\n    * {Number} Site ID\n      * {Number} Marker layer ID\n        * {Number} Marker ID\n          * Marker {Object}\n  */\n  getMarkers () {\n    const result = {}\n    this.markerLayersBySiteId.forEach((layersById, siteId) => {\n      if (layersById.size > 0) {\n        result[siteId] = {}\n        layersById.forEach((markersById, layerId) => {\n          result[siteId][layerId] = {}\n          markersById.forEach((marker, markerId) => {\n            const resultMarker = Object.assign({}, marker)\n            resultMarker.range = this.resolveLogicalRange(marker.range, marker.exclusive)\n\n            result[siteId][layerId][markerId] = resultMarker\n          })\n        })\n      }\n    })\n    return result\n  }\n\n  /*\n  Public: Updates markers in the Document.\n\n  If a Marker exists with the specified ID, its value is updated.\n  If no Marker exists with the specified ID, one is created.\n\n  * `layerUpdatesById` {Object} of shape:\n    * {Number} Marker layer ID\n      * {Numer} Marker ID\n        * Marker {Object}\n\n  Returns an {Array} including the marker update operation.\n  */\n  updateMarkers (layerUpdatesById) {\n    const operation = {\n      type: 'markers-update',\n      siteId: this.siteId,\n      updates: {}\n    }\n\n    const layers = this.markerLayersBySiteId.get(this.siteId)\n    for (let layerId in layerUpdatesById) {\n      const layerUpdate = layerUpdatesById[layerId]\n      layerId = parseInt(layerId)\n      let layer = layers.get(layerId)\n\n      if (layerUpdate === null) {\n        if (layer) {\n          layers.delete(layerId)\n          operation.updates[layerId] = null\n        }\n      } else {\n        if (!layer) {\n          layer = new Map()\n          layers.set(layerId, layer)\n        }\n\n        operation.updates[layerId] = {}\n        for (let markerId in layerUpdate) {\n          const markerUpdate = layerUpdate[markerId]\n          markerId = parseInt(markerId)\n          let marker = layer.get(markerId)\n\n          if (markerUpdate) {\n            if (marker) {\n              marker = Object.assign({}, marker)\n            } else {\n              marker = {exclusive: false, reversed: false, tailed: true}\n            }\n\n            const updatingExclusive = marker.exclusive !== markerUpdate.exclusive\n            Object.assign(marker, markerUpdate)\n            if (markerUpdate.range || updatingExclusive) {\n              marker.range = this.getLogicalRange(markerUpdate.range || marker.range, marker.exclusive)\n            }\n            Object.freeze(marker)\n            layer.set(markerId, marker)\n            operation.updates[layerId][markerId] = marker\n          } else {\n            layer.delete(markerId)\n            operation.updates[layerId][markerId] = null\n          }\n        }\n      }\n    }\n\n    return [operation]\n  }\n\n  /*\n  Public: Undoes the latest Transaction on the undo stack.\n\n  If there's a barrier before the latest Transaction, nothing happens.\n\n  Returns null or an {Object} of shape:\n    * `markers` {Object} of shape:\n      * {Number} Marker layer ID\n        * {Number} Marker ID\n          * Marker {Object}\n    * `textUpdates` {Array} of {Object}s of shape:\n      * `oldStart` Point {Object}\n      * `oldEnd` Point {Object}\n      * `oldText` {String}\n      * `newStart` Point {Object}\n      * `newEnd` Point {Object}\n      * `newText` {String}\n    * `operations` {Array} of operations\n  */\n  undo () {\n    let spliceIndex = null\n    let operationsToUndo = []\n    let markersSnapshot\n    for (let i = this.undoStack.length - 1; i >=0; i--) {\n      const stackEntry = this.undoStack[i]\n      if (stackEntry instanceof Transaction) {\n        operationsToUndo = stackEntry.operations\n        markersSnapshot = stackEntry.markersSnapshotBefore\n        spliceIndex = i\n        break\n      } else if (stackEntry instanceof Checkpoint && stackEntry.isBarrier) {\n        return null\n      }\n    }\n\n    if (spliceIndex != null) {\n      this.redoStack.push(...this.undoStack.splice(spliceIndex).reverse())\n      const {operations, textUpdates} = this.undoOrRedoOperations(operationsToUndo)\n      let markers = this.markersFromSnapshot(markersSnapshot)\n      return {operations, textUpdates, markers}\n    } else {\n      return null\n    }\n  }\n\n  /*\n  Public: Redoes the latest Transaction on the redo stack.\n\n  Returns null or an {Object} of shape:\n    * `markers` {Object} of shape:\n      * {Number} Marker layer ID\n        * {Number} Marker ID\n          * Marker {Object}\n    * `textUpdates` {Array} of {Object}s of shape:\n      * `oldStart: Point {Object}\n      * `oldEnd` Point {Object}\n      * `oldText` {String}\n      * `newStart` Point {Object}\n      * `newEnd` Point {Object}\n      * `newText` {String}\n    * `operations` {Array} of operations\n  */\n  redo () {\n    let spliceIndex = null\n    let operationsToRedo = []\n    let markersSnapshot\n    for (let i = this.redoStack.length - 1; i >= 0; i--) {\n      const stackEntry = this.redoStack[i]\n      if (stackEntry instanceof Transaction) {\n        operationsToRedo = stackEntry.operations\n        markersSnapshot = stackEntry.markersSnapshotAfter\n        spliceIndex = i\n        break\n      }\n    }\n\n    while (this.redoStack[spliceIndex - 1] instanceof Checkpoint) {\n      spliceIndex--\n    }\n\n    if (spliceIndex != null) {\n      this.undoStack.push(...this.redoStack.splice(spliceIndex).reverse())\n      const {operations, textUpdates} = this.undoOrRedoOperations(operationsToRedo)\n      const markers = markersSnapshot ? this.markersFromSnapshot(markersSnapshot) : null\n      return {operations, textUpdates, markers}\n    } else {\n      return null\n    }\n  }\n\n  clearUndoStack () {\n    this.undoStack.length = 0\n  }\n\n  clearRedoStack () {\n    this.redoStack.length = 0\n  }\n\n  /*\n  Public: Groups together transactions that happened within the specified\n  `groupingInterval`.\n\n  * `groupingInterval` {Number} of milliseconds\n\n  */\n  applyGroupingInterval (groupingInterval) {\n    const topEntry = this.undoStack[this.undoStack.length - 1]\n    const previousEntry = this.undoStack[this.undoStack.length - 2]\n\n    if (topEntry instanceof Transaction) {\n      topEntry.groupingInterval = groupingInterval\n    } else {\n      return\n    }\n\n    if (previousEntry instanceof Transaction) {\n      const timeBetweenEntries = topEntry.timestamp - previousEntry.timestamp\n      const minGroupingInterval = Math.min(groupingInterval, previousEntry.groupingInterval || Infinity)\n      if (timeBetweenEntries < minGroupingInterval) {\n        this.undoStack.pop()\n        previousEntry.timestamp = topEntry.timestamp\n        previousEntry.groupingInterval = groupingInterval\n        previousEntry.operations.push(...topEntry.operations)\n        previousEntry.markersSnapshotAfter = topEntry.markersSnapshotAfter\n      }\n    }\n  }\n\n  getNow () {\n    return Date.now()\n  }\n\n  /*\n  Public: Creates a Checkpoint in the undo stack.\n\n  If a Checkpoint is a barrier, Transactions chronologically before it cannot be\n  undone or grouped with Transactions before it.\n\n  * `options` {Object} of shape:\n    * `isBarrier` {Bool}\n    * `markers` {Array} of Marker {Object}s\n\n  Returns {Number}\n  */\n  createCheckpoint (options) {\n    const checkpoint = new Checkpoint(\n      this.nextCheckpointId++,\n      options && options.isBarrier,\n      options && this.snapshotFromMarkers(options.markers)\n    )\n    this.undoStack.push(checkpoint)\n    return checkpoint.id\n  }\n\n  /*\n  Private: Checks if a barrier Checkpoint is present chronologically\n  before a given Checkpoint.\n\n  This is used to prevent undo operations or Transaction grouping over barriers.\n\n  * `checkpointId` {Number}\n\n  Returns {Bool}\n  */\n  isBarrierPresentBeforeCheckpoint (checkpointId) {\n    for (let i = this.undoStack.length - 1; i >= 0; i--) {\n      const stackEntry = this.undoStack[i]\n      if (stackEntry instanceof Checkpoint) {\n        if (stackEntry.id == checkpointId) return false\n        if (stackEntry.isBarrier) return true\n      }\n    }\n\n    return false\n  }\n\n  groupChangesSinceCheckpoint (checkpointId, options) {\n    if (this.isBarrierPresentBeforeCheckpoint(checkpointId)) return false\n\n    const result = this.collectOperationsSinceCheckpoint(checkpointId, true, options && options.deleteCheckpoint)\n    if (result) {\n      const {operations, markersSnapshot}  = result\n      if (operations.length > 0) {\n        this.undoStack.push(new Transaction(\n          this.getNow(),\n          operations,\n          markersSnapshot,\n          options && this.snapshotFromMarkers(options.markers)\n        ))\n        return this.textUpdatesForOperations(operations)\n      } else {\n        return []\n      }\n    } else {\n      return false\n    }\n  }\n\n  /*\n  Public: Reverts the document to a checkpoint in the undo stack.\n\n  If a barrier exists in the undo stack before the checkpoint matching\n  `checkpointId`, the reversion fails.\n\n  * `checkpointId` {Number}\n  * `options` {Object} of shape:\n    * `deleteCheckpoint` {Bool}\n\n  Returns false if the revert couldn't be completed, else returns an {Object} of shape:\n      * `markers` {Object} of shape:\n        * {Number} Marker layer ID\n          * {Number} Marker ID\n            * Marker {Object}\n      * `textUpdates` {Array} of {Object}s of shape:\n        * `oldStart` Point {Object}\n        * `oldEnd` Point {Object}\n        * `oldText` {String}\n        * `newStart` Point {Object}\n        * `newEnd` Point {Object}\n        * `newText` {String}\n      * `operations` {Array} of operations\n  */\n  revertToCheckpoint (checkpointId, options) {\n    if (this.isBarrierPresentBeforeCheckpoint(checkpointId)) return false\n\n    const collectResult = this.collectOperationsSinceCheckpoint(checkpointId, true, options && options.deleteCheckpoint)\n    if (collectResult) {\n      const {operations, textUpdates} = this.undoOrRedoOperations(collectResult.operations)\n      const markers = this.markersFromSnapshot(collectResult.markersSnapshot)\n      return {operations, textUpdates, markers}\n    } else {\n      return false\n    }\n  }\n\n  /*\n  Public: Gets changes performed since a checkpoint.\n\n  * `checkpointId` {Number}\n\n  Returns false or {Array} of {Object}s of shape:\n    * `oldStart` Point {Object}\n    * `oldEnd` Point {Object}\n    * `oldText` {String}\n    * `newStart` Point {Object}\n    * `newEnd` Point {Object}\n    * `newText` {String}\n  */\n  getChangesSinceCheckpoint (checkpointId) {\n    const result = this.collectOperationsSinceCheckpoint(checkpointId, false, false)\n    if (result) {\n      return this.textUpdatesForOperations(result.operations)\n    } else {\n      return false\n    }\n  }\n\n  collectOperationsSinceCheckpoint (checkpointId, deleteOperations, deleteCheckpoint) {\n    let checkpointIndex = -1\n    const operations = []\n    for (let i = this.undoStack.length - 1; i >= 0; i--) {\n      const stackEntry = this.undoStack[i]\n      if (stackEntry instanceof Checkpoint) {\n        if (stackEntry.id === checkpointId) {\n          checkpointIndex = i\n          break\n        }\n      } else if (stackEntry instanceof Transaction) {\n        operations.push(...stackEntry.operations)\n      } else {\n        throw new Error('Unknown stack entry ' + stackEntry.constructor.name)\n      }\n    }\n\n    if (checkpointIndex === -1) {\n      return null\n    } else {\n      const {markersSnapshot} = this.undoStack[checkpointIndex]\n      if (deleteOperations) {\n        if (!deleteCheckpoint) checkpointIndex++\n        this.undoStack.splice(checkpointIndex)\n      }\n      return {operations, markersSnapshot}\n    }\n  }\n\n  /*\n  Public: Groups the last two changes on the undo stack.\n\n  Returns true if a grouping was made, else false.\n  */\n  groupLastChanges () {\n    let lastTransaction\n\n    for (let i = this.undoStack.length - 1; i >= 0; i--) {\n      const stackEntry = this.undoStack[i]\n\n      if (stackEntry instanceof Checkpoint) {\n        if (stackEntry.isBarrier) return false\n      } else {\n        if (lastTransaction) {\n          this.undoStack.splice(i)\n          this.undoStack.push(new Transaction(\n            this.getNow(),\n            stackEntry.operations.concat(lastTransaction.operations),\n            stackEntry.markersSnapshotBefore,\n            lastTransaction.markersSnapshotAfter\n          ))\n          return true\n        } else {\n          lastTransaction = stackEntry\n        }\n      }\n    }\n\n    return false\n  }\n\n  /*\n  Public: Gets a serializable representation of the history.\n\n  * `maxEntries` Maximum {Number} of history entries to return\n\n  Returns {Object} of shape:\n    * `nextCheckpointId` {Number}\n    * `undoStack` {Array} of either Checkpoint or Transaction {Object}s\n    * `redoStack` {Array} of either Checkpoint or Transaction {Object}s\n  */\n  getHistory (maxEntries) {\n    const originalUndoCounts = new Map(this.undoCountsBySpliceId)\n\n    const redoStack = []\n    for (let i = this.redoStack.length - 1; i >= 0; i--) {\n      const entry = this.redoStack[i]\n      if (entry instanceof Transaction) {\n        const markersBefore = this.markersFromSnapshot(entry.markersSnapshotBefore)\n        const changes = this.undoOrRedoOperations(entry.operations).textUpdates\n        const markersAfter = this.markersFromSnapshot(entry.markersSnapshotAfter)\n        redoStack.push({type: 'transaction', changes, markersBefore, markersAfter})\n      } else {\n        redoStack.push({\n          type: 'checkpoint',\n          id: entry.id,\n          markers: this.markersFromSnapshot(entry.markersSnapshot)\n        })\n      }\n      if (redoStack.length === maxEntries) break\n    }\n    redoStack.reverse()\n\n    // Undo operations we redid above while computing changes\n    for (let i = this.redoStack.length - 1; i >= this.redoStack.length - redoStack.length; i--) {\n      const entry = this.redoStack[i]\n      if (entry instanceof Transaction) {\n        this.undoOrRedoOperations(entry.operations)\n      }\n    }\n\n    const undoStack = []\n    for (let i = this.undoStack.length - 1; i >= 0; i--) {\n      const entry = this.undoStack[i]\n      if (entry instanceof Transaction) {\n        const markersAfter = this.markersFromSnapshot(entry.markersSnapshotAfter)\n        const changes = invertTextUpdates(this.undoOrRedoOperations(entry.operations).textUpdates)\n        const markersBefore = this.markersFromSnapshot(entry.markersSnapshotBefore)\n        undoStack.push({type: 'transaction', changes, markersBefore, markersAfter})\n      } else {\n        undoStack.push({\n          type: 'checkpoint',\n          id: entry.id,\n          markers: this.markersFromSnapshot(entry.markersSnapshot)\n        })\n      }\n      if (undoStack.length === maxEntries) break\n    }\n    undoStack.reverse()\n\n    // Redo operations we undid above while computing changes\n    for (let i = this.undoStack.length - 1; i >= this.undoStack.length - undoStack.length; i--) {\n      const entry = this.undoStack[i]\n      if (entry instanceof Transaction) {\n        this.undoOrRedoOperations(entry.operations)\n      }\n    }\n\n    this.undoCountsBySpliceId = originalUndoCounts\n\n    return {\n      nextCheckpointId: this.nextCheckpointId,\n      undoStack,\n      redoStack\n    }\n  }\n\n  /*\n  Private: Deletes text between `start` and `end`.\n\n  * `spliceId` {Number}\n  * `start` Point {Object}\n  * `end` Point {Object}\n\n  Returns deletion operation {Object}\n  */\n  delete (spliceId, start, end) {\n    const spliceIdString = spliceIdToString(spliceId)\n\n    const left = this.findLocalSegmentBoundary(start)[1]\n    const right = this.findLocalSegmentBoundary(end)[0]\n\n    const maxSeqsBySite = {}\n    let segment = left\n    while (true) {\n      const maxSeq = maxSeqsBySite[segment.spliceId.site]\n      if (maxSeq == null || segment.spliceId.seq > maxSeq) {\n        maxSeqsBySite[segment.spliceId.site] = segment.spliceId.seq\n      }\n\n      segment.deletions.add(spliceIdString)\n      this.documentTree.splayNode(segment)\n      this.documentTree.updateSubtreeExtent(segment)\n      if (segment === right) break\n      segment = this.documentTree.getSuccessor(segment)\n    }\n\n    const deletion = {\n      spliceId,\n      leftDependencyId: left.spliceId,\n      offsetInLeftDependency: left.offset,\n      rightDependencyId: right.spliceId,\n      offsetInRightDependency: traverse(right.offset, right.extent),\n      maxSeqsBySite\n    }\n    this.deletionsBySpliceId.set(spliceIdString, deletion)\n    return deletion\n  }\n\n  /*\n  Private: Inserts `text` at `position`.\n\n  * `spliceId` {Number}\n  * `position` Point {Object}\n  * `text` {String}\n\n  Returns insertion operation {Object}\n  */\n  insert (spliceId, position, text) {\n    const [left, right] = this.findLocalSegmentBoundary(position)\n    const newSegment = {\n      spliceId,\n      text,\n      extent: extentForText(text),\n      offset: ZERO_POINT,\n      leftDependency: left,\n      rightDependency: right,\n      nextSplit: null,\n      deletions: new Set()\n    }\n    this.documentTree.insertBetween(left, right, newSegment)\n    this.splitTreesBySpliceId.set(spliceIdToString(spliceId), new SplitTree(newSegment))\n\n    return {\n      text,\n      leftDependencyId: left.spliceId,\n      offsetInLeftDependency: traverse(left.offset, left.extent),\n      rightDependencyId: right.spliceId,\n      offsetInRightDependency: right.offset\n    }\n  }\n\n  undoOrRedoOperations (operationsToUndo) {\n    const undoOperations = []\n    const oldUndoCounts = new Map()\n\n    for (var i = 0; i < operationsToUndo.length; i++) {\n      const {spliceId} = operationsToUndo[i]\n      const newUndoCount = (this.undoCountsBySpliceId.get(spliceIdToString(spliceId)) || 0) + 1\n      this.updateUndoCount(spliceId, newUndoCount, oldUndoCounts)\n      const operation = {type: 'undo', spliceId, undoCount: newUndoCount}\n      undoOperations.push(operation)\n      this.operations.push(operation)\n    }\n\n    return {\n      operations: undoOperations,\n      textUpdates: this.textUpdatesForOperations(undoOperations, oldUndoCounts)\n    }\n  }\n\n  isSpliceUndone ({spliceId}) {\n    const undoCount = this.undoCountsBySpliceId.get(spliceIdToString(spliceId))\n    return undoCount != null && (undoCount & 1 === 1)\n  }\n\n  canIntegrateOperation (op) {\n    switch (op.type) {\n      case 'splice': {\n        const {spliceId, deletion, insertion} = op\n\n        if ((this.maxSeqsBySite[spliceId.site] || 0) !== spliceId.seq - 1) {\n          return false\n        }\n\n        if (deletion) {\n          const hasLeftAndRightDependencies = (\n            this.splitTreesBySpliceId.has(spliceIdToString(deletion.leftDependencyId)) &&\n            this.splitTreesBySpliceId.has(spliceIdToString(deletion.rightDependencyId))\n          )\n          if (!hasLeftAndRightDependencies) return false\n\n          for (const site in deletion.maxSeqsBySite) {\n            if (deletion.maxSeqsBySite[site] > (this.maxSeqsBySite[site] || 0)) {\n              return false\n            }\n          }\n        }\n\n        if (insertion) {\n          const hasLeftAndRightDependencies = (\n            this.splitTreesBySpliceId.has(spliceIdToString(insertion.leftDependencyId)) &&\n            this.splitTreesBySpliceId.has(spliceIdToString(insertion.rightDependencyId))\n          )\n          if (!hasLeftAndRightDependencies) return false\n        }\n\n        return true\n      }\n      case 'undo': {\n        const spliceIdString = spliceIdToString(op.spliceId)\n        return (\n          this.splitTreesBySpliceId.has(spliceIdString) ||\n          this.deletionsBySpliceId.has(spliceIdString)\n        )\n      }\n      case 'markers-update':\n        return true\n      default:\n        throw new Error('Unknown operation type')\n    }\n  }\n\n  /*\n  Public: Integrates operations received from other documents into the current\n  document.\n\n  * `operations` {Array} of operations.\n\n  Returns {Object} of shape:\n  * `markerUpdates` {Object} of shape:\n    * {Number} Site ID\n      * {Number} Marker layer ID\n        * {Number} Marker ID\n          * Marker {Object}\n  * `textUpdates` {Array} of {Object}s of shape:\n    * `oldStart` Point {Object}\n    * `oldEnd` Point {Object}\n    * `oldText` {String}\n    * `newStart` Point {Object}\n    * `newEnd` Point {Object}\n    * `newText` {String}\n  */\n  integrateOperations (operations) {\n    const integratedOperations = []\n    let oldUndoCounts\n    let i = 0\n    while (i < operations.length) {\n      const operation = operations[i++]\n      if (operation.type !== 'markers-update') this.operations.push(operation)\n\n      if (this.canIntegrateOperation(operation)) {\n        integratedOperations.push(operation)\n        switch (operation.type) {\n          case 'splice':\n            if (operation.deletion) this.integrateDeletion(operation.spliceId, operation.deletion)\n            if (operation.insertion) this.integrateInsertion(operation.spliceId, operation.insertion)\n            this.updateMaxSeqsBySite(operation.spliceId)\n            break\n          case 'undo':\n            if (!oldUndoCounts) oldUndoCounts = new Map()\n            this.integrateUndo(operation, oldUndoCounts)\n            break\n        }\n        this.collectDeferredOperations(operation, operations)\n      } else {\n        this.deferOperation(operation)\n      }\n    }\n\n    const textUpdates = this.textUpdatesForOperations(integratedOperations, oldUndoCounts)\n    const markerUpdates = this.updateMarkersForOperations(integratedOperations)\n\n    return {textUpdates, markerUpdates}\n  }\n\n  collectDeferredOperations ({spliceId}, operations) {\n    if (spliceId) {\n      const spliceIdString = spliceIdToString(spliceId)\n      const dependentOps = this.deferredOperationsByDependencyId.get(spliceIdString)\n      if (dependentOps) {\n        dependentOps.forEach((dependentOp) => {\n          if (this.canIntegrateOperation(dependentOp)) {\n            operations.push(dependentOp)\n          }\n        })\n        this.deferredOperationsByDependencyId.delete(spliceIdString)\n      }\n    }\n  }\n\n  deferOperation (op) {\n    if (op.type === 'splice') {\n      const {spliceId, deletion, insertion} = op\n      this.addOperationDependency(this.deferredOperationsByDependencyId, {site: spliceId.site, seq: spliceId.seq - 1}, op)\n\n      if (deletion) {\n        this.addOperationDependency(this.deferredOperationsByDependencyId, deletion.leftDependencyId, op)\n        this.addOperationDependency(this.deferredOperationsByDependencyId, deletion.rightDependencyId, op)\n        for (const site in deletion.maxSeqsBySite) {\n          const seq = deletion.maxSeqsBySite[site]\n          this.addOperationDependency(this.deferredOperationsByDependencyId, {site, seq}, op)\n        }\n      }\n\n      if (insertion) {\n        this.addOperationDependency(this.deferredOperationsByDependencyId, insertion.leftDependencyId, op)\n        this.addOperationDependency(this.deferredOperationsByDependencyId, insertion.rightDependencyId, op)\n      }\n    } else if (op.type === 'undo') {\n      this.addOperationDependency(this.deferredOperationsByDependencyId, op.spliceId, op)\n    } else {\n      throw new Error('Unknown operation type: ' + op.type)\n    }\n  }\n\n  addOperationDependency (map, dependencyId, op) {\n    const dependencyIdString = spliceIdToString(dependencyId)\n    if (!this.hasAppliedSplice(dependencyId)) {\n      let deferredOps = map.get(dependencyIdString)\n      if (!deferredOps) {\n        deferredOps = new Set()\n        map.set(dependencyIdString, deferredOps)\n      }\n      deferredOps.add(op)\n    }\n  }\n\n  hasAppliedSplice (spliceId) {\n    const spliceIdString = spliceIdToString(spliceId)\n    return (\n      this.splitTreesBySpliceId.has(spliceIdString) ||\n      this.deletionsBySpliceId.has(spliceIdString)\n    )\n  }\n\n  integrateInsertion (spliceId, operation) {\n    const {text, leftDependencyId, offsetInLeftDependency, rightDependencyId, offsetInRightDependency} = operation\n\n    const originalRightDependency = this.findSegmentStart(rightDependencyId, offsetInRightDependency)\n    const originalLeftDependency = this.findSegmentEnd(leftDependencyId, offsetInLeftDependency)\n\n    this.documentTree.splayNode(originalLeftDependency)\n    this.documentTree.splayNode(originalRightDependency)\n\n    let currentSegment = this.documentTree.getSuccessor(originalLeftDependency)\n    let leftDependency = originalLeftDependency\n    let rightDependency = originalRightDependency\n    while (currentSegment !== rightDependency) {\n      const leftDependencyIndex = this.documentTree.getSegmentIndex(leftDependency)\n      const rightDependencyIndex = this.documentTree.getSegmentIndex(rightDependency)\n      const currentSegmentLeftDependencyIndex = this.documentTree.getSegmentIndex(currentSegment.leftDependency)\n      const currentSegmentRightDependencyIndex = this.documentTree.getSegmentIndex(currentSegment.rightDependency)\n\n      if (currentSegmentLeftDependencyIndex <= leftDependencyIndex && currentSegmentRightDependencyIndex >= rightDependencyIndex) {\n        if (spliceId.site < currentSegment.spliceId.site) {\n          rightDependency = currentSegment\n        } else {\n          leftDependency = currentSegment\n        }\n\n        currentSegment = this.documentTree.getSuccessor(leftDependency)\n      } else {\n        currentSegment = this.documentTree.getSuccessor(currentSegment)\n      }\n    }\n\n    const newSegment = {\n      spliceId,\n      offset: ZERO_POINT,\n      text,\n      extent: extentForText(text),\n      leftDependency: originalLeftDependency,\n      rightDependency: originalRightDependency,\n      nextSplit: null,\n      deletions: new Set()\n    }\n    this.documentTree.insertBetween(leftDependency, rightDependency, newSegment)\n    this.splitTreesBySpliceId.set(spliceIdToString(spliceId), new SplitTree(newSegment))\n  }\n\n  integrateDeletion (spliceId, deletion) {\n    const {\n      leftDependencyId, offsetInLeftDependency,\n      rightDependencyId, offsetInRightDependency,\n      maxSeqsBySite\n    } = deletion\n\n    const spliceIdString = spliceIdToString(spliceId)\n    this.deletionsBySpliceId.set(spliceIdString, deletion)\n\n    const left = this.findSegmentStart(leftDependencyId, offsetInLeftDependency)\n    const right = this.findSegmentEnd(rightDependencyId, offsetInRightDependency)\n    let segment = left\n    while (true) {\n      const maxSeq = maxSeqsBySite[segment.spliceId.site] || 0\n      if (segment.spliceId.seq <= maxSeq) {\n        this.documentTree.splayNode(segment)\n        segment.deletions.add(spliceIdString)\n        this.documentTree.updateSubtreeExtent(segment)\n      }\n\n      if (segment === right) break\n      segment = this.documentTree.getSuccessor(segment)\n    }\n  }\n\n  integrateUndo ({spliceId, undoCount}, oldUndoCounts) {\n    return this.updateUndoCount(spliceId, undoCount, oldUndoCounts)\n  }\n\n  getMarkerLayersForSiteId (siteId) {\n    let layers = this.markerLayersBySiteId.get(siteId)\n    if (!layers) {\n      layers = new Map()\n      this.markerLayersBySiteId.set(siteId, layers)\n    }\n    return layers\n  }\n\n  deferMarkerUpdate (siteId, layerId, markerId, markerUpdate) {\n    const {range} = markerUpdate\n    const deferredMarkerUpdate = {siteId, layerId, markerId}\n    this.addOperationDependency(this.deferredMarkerUpdatesByDependencyId, range.startDependencyId, deferredMarkerUpdate)\n    this.addOperationDependency(this.deferredMarkerUpdatesByDependencyId, range.endDependencyId, deferredMarkerUpdate)\n\n    let deferredUpdatesByLayerId = this.deferredMarkerUpdates.get(siteId)\n    if (!deferredUpdatesByLayerId) {\n      deferredUpdatesByLayerId = new Map()\n      this.deferredMarkerUpdates.set(siteId, deferredUpdatesByLayerId)\n    }\n    let deferredUpdatesByMarkerId = deferredUpdatesByLayerId.get(layerId)\n    if (!deferredUpdatesByMarkerId) {\n      deferredUpdatesByMarkerId = new Map()\n      deferredUpdatesByLayerId.set(layerId, deferredUpdatesByMarkerId)\n    }\n    deferredUpdatesByMarkerId.set(markerId, markerUpdate)\n  }\n\n  updateMarkersForOperations (operations) {\n    const markerUpdates = {}\n\n    for (let i = 0; i < operations.length; i++) {\n      const operation = operations[i]\n      if (operation.type === 'markers-update') {\n        this.integrateMarkerUpdates(markerUpdates, operation)\n      } else if (operation.type === 'splice') {\n        this.integrateDeferredMarkerUpdates(markerUpdates, operation)\n      }\n    }\n\n    return markerUpdates\n  }\n\n  integrateMarkerUpdates (markerUpdates, {siteId, updates}) {\n    const layers = this.getMarkerLayersForSiteId(siteId)\n    if (!markerUpdates[siteId]) markerUpdates[siteId] = {}\n\n    for (let layerId in updates) {\n      const updatesByMarkerId = updates[layerId]\n      layerId = parseInt(layerId)\n\n      let layer = layers.get(layerId)\n      if (updatesByMarkerId) {\n        if (!layer) {\n          layer = new Map()\n          layers.set(layerId, layer)\n        }\n\n        if (!markerUpdates[siteId][layerId]) markerUpdates[siteId][layerId] = {}\n\n        for (let markerId in updatesByMarkerId) {\n          const markerUpdate = updatesByMarkerId[markerId]\n          markerId = parseInt(markerId)\n\n          if (markerUpdate) {\n            if (markerUpdate.range && !this.canResolveLogicalRange(markerUpdate.range)) {\n              this.deferMarkerUpdate(siteId, layerId, markerId, markerUpdate)\n            } else {\n              this.integrateMarkerUpdate(markerUpdates, siteId, layerId, markerId, markerUpdate)\n            }\n          } else {\n            if (layer.has(markerId)) {\n              layer.delete(markerId)\n              markerUpdates[siteId][layerId][markerId] = null\n            }\n\n            const deferredUpdatesByLayerId = this.deferredMarkerUpdates.get(siteId)\n            if (deferredUpdatesByLayerId) {\n              const deferredUpdatesByMarkerId = deferredUpdatesByLayerId.get(layerId)\n              if (deferredUpdatesByMarkerId) {\n                deferredUpdatesByMarkerId.delete(markerId)\n              }\n            }\n          }\n        }\n      } else {\n        if (layer) {\n          markerUpdates[siteId][layerId] = null\n          layers.delete(layerId)\n        }\n\n        const deferredUpdatesByLayerId = this.deferredMarkerUpdates.get(siteId)\n        if (deferredUpdatesByLayerId) {\n          deferredUpdatesByLayerId.delete(layerId)\n        }\n      }\n    }\n  }\n\n  integrateDeferredMarkerUpdates (markerUpdates, {spliceId}) {\n    const spliceIdString = spliceIdToString(spliceId)\n    const dependentMarkerUpdates = this.deferredMarkerUpdatesByDependencyId.get(spliceIdString)\n    if (dependentMarkerUpdates) {\n      dependentMarkerUpdates.forEach(({siteId, layerId, markerId}) => {\n        const deferredUpdatesByLayerId = this.deferredMarkerUpdates.get(siteId)\n        if (deferredUpdatesByLayerId) {\n          const deferredUpdatesByMarkerId = deferredUpdatesByLayerId.get(layerId)\n          if (deferredUpdatesByMarkerId) {\n            const deferredUpdate = deferredUpdatesByMarkerId.get(markerId)\n            if (deferredUpdate && this.canResolveLogicalRange(deferredUpdate.range)) {\n              this.integrateMarkerUpdate(markerUpdates, siteId, layerId, markerId, deferredUpdate)\n            }\n          }\n        }\n      })\n      this.deferredMarkerUpdatesByDependencyId.delete(spliceIdString)\n    }\n  }\n\n  integrateMarkerUpdate (markerUpdates, siteId, layerId, markerId, update) {\n    let layer = this.markerLayersBySiteId.get(siteId).get(layerId)\n    if (!layer) {\n      layer = new Map()\n      this.markerLayersBySiteId.get(siteId).set(layerId, layer)\n    }\n\n    let marker = layer.get(markerId)\n    marker = marker ? Object.assign({}, marker) : {}\n    Object.assign(marker, update)\n    Object.freeze(marker)\n    layer.set(markerId, marker)\n\n    if (!markerUpdates[siteId]) markerUpdates[siteId] = {}\n    if (!markerUpdates[siteId][layerId]) markerUpdates[siteId][layerId] = {}\n    markerUpdates[siteId][layerId][markerId] = Object.assign({}, marker)\n    markerUpdates[siteId][layerId][markerId].range = this.resolveLogicalRange(marker.range, marker.exclusive)\n\n    const deferredUpdatesByLayerId = this.deferredMarkerUpdates.get(siteId)\n    if (deferredUpdatesByLayerId) {\n      const deferredUpdatesByMarkerId = deferredUpdatesByLayerId.get(layerId)\n      if (deferredUpdatesByMarkerId) {\n        if (deferredUpdatesByMarkerId.has(markerId)) {\n          deferredUpdatesByMarkerId.delete(markerId)\n          if (deferredUpdatesByMarkerId.size === 0) {\n            deferredUpdatesByLayerId.delete(layerId)\n            if (deferredUpdatesByLayerId.size === 0) {\n              this.deferredMarkerUpdates.delete(siteId)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  snapshotFromMarkers (layersById) {\n    if (!layersById) return layersById\n\n    const snapshot = {}\n    for (const layerId in layersById) {\n      const layerSnapshot = {}\n      const markersById = layersById[layerId]\n      for (const markerId in markersById) {\n        const markerSnapshot = Object.assign({}, markersById[markerId])\n        markerSnapshot.range = this.getLogicalRange(markerSnapshot.range, markerSnapshot.exclusive)\n        layerSnapshot[markerId] = markerSnapshot\n      }\n      snapshot[layerId] = layerSnapshot\n    }\n    return snapshot\n  }\n\n  markersFromSnapshot (snapshot) {\n    if (!snapshot) return snapshot\n\n    const layersById = {}\n    for (const layerId in snapshot) {\n      const markersById = {}\n      const layerSnapshot = snapshot[layerId]\n      for (const markerId in layerSnapshot) {\n        const marker = Object.assign({}, layerSnapshot[markerId])\n        marker.range = this.resolveLogicalRange(marker.range)\n        markersById[markerId] = marker\n      }\n      layersById[layerId] = markersById\n    }\n    return layersById\n  }\n\n  updateUndoCount (spliceId, newUndoCount, oldUndoCounts) {\n    const spliceIdString = spliceIdToString(spliceId)\n    const previousUndoCount = this.undoCountsBySpliceId.get(spliceIdString) || 0\n    if (newUndoCount <= previousUndoCount) return\n\n    oldUndoCounts.set(spliceIdString, previousUndoCount)\n    this.undoCountsBySpliceId.set(spliceIdString, newUndoCount)\n\n    const segmentsToUpdate = new Set()\n    this.collectSegments(spliceIdString, segmentsToUpdate)\n\n    segmentsToUpdate.forEach((segment) => {\n      const wasVisible = this.isSegmentVisible(segment, oldUndoCounts)\n      const isVisible = this.isSegmentVisible(segment)\n      if (isVisible !== wasVisible) {\n        this.documentTree.splayNode(segment, oldUndoCounts)\n        this.documentTree.updateSubtreeExtent(segment)\n      }\n    })\n  }\n\n  textUpdatesForOperations (operations, oldUndoCounts) {\n    const newSpliceIds = new Set()\n    const segmentStartPositions = new Map()\n    const segmentIndices = new Map()\n\n    for (let i = 0; i < operations.length; i++) {\n      const operation = operations[i]\n      const {type, spliceId} = operation\n      if (spliceId) {\n        const spliceIdString = spliceIdToString(spliceId)\n        if (type === 'splice') newSpliceIds.add(spliceIdString)\n        this.collectSegments(spliceIdString, null, segmentIndices, segmentStartPositions)\n      }\n    }\n\n    return this.computeChangesForSegments(segmentIndices, segmentStartPositions, oldUndoCounts, newSpliceIds)\n  }\n\n  canResolveLogicalRange ({startDependencyId, endDependencyId}) {\n    return (\n      this.hasAppliedSplice(startDependencyId) &&\n      this.hasAppliedSplice(endDependencyId)\n    )\n  }\n\n  getLogicalRange ({start, end}, exclusive) {\n    const {segment: startDependency, offset: offsetInStartDependency} = this.findSegment(start, exclusive)\n    const {segment: endDependency, offset: offsetInEndDependency} = this.findSegment(end, !exclusive || compare(start, end) === 0)\n\n    return {\n      startDependencyId: startDependency.spliceId,\n      offsetInStartDependency,\n      endDependencyId: endDependency.spliceId,\n      offsetInEndDependency\n    }\n  }\n\n  resolveLogicalRange (logicalRange, exclusive) {\n    const {\n      startDependencyId, offsetInStartDependency,\n      endDependencyId, offsetInEndDependency\n    } = logicalRange\n    return {\n      start: this.resolveLogicalPosition(startDependencyId, offsetInStartDependency, exclusive),\n      end: this.resolveLogicalPosition(endDependencyId, offsetInEndDependency, !exclusive || isEmptyLogicalRange(logicalRange))\n    }\n  }\n\n  resolveLogicalPosition (spliceId, offset, preferStart) {\n    const splitTree = this.splitTreesBySpliceId.get(spliceIdToString(spliceId))\n    let segment = splitTree.findSegmentContainingOffset(offset)\n    const nextSegmentOffset = traverse(segment.offset, segment.extent)\n    if (preferStart && compare(offset, nextSegmentOffset) === 0) {\n      segment = splitTree.getSuccessor(segment) || segment\n    }\n    const segmentStart = this.documentTree.getSegmentPosition(segment)\n\n    if (this.isSegmentVisible(segment)) {\n      return traverse(segmentStart, traversal(offset, segment.offset))\n    } else {\n      return segmentStart\n    }\n  }\n\n  findLocalSegmentBoundary (position) {\n    const {segment, start, end} = this.documentTree.findSegmentContainingPosition(position)\n    if (compare(position, end) < 0) {\n      const splitTree = this.splitTreesBySpliceId.get(spliceIdToString(segment.spliceId))\n      return this.splitSegment(splitTree, segment, traversal(position, start))\n    } else {\n      return [segment, this.documentTree.getSuccessor(segment)]\n    }\n  }\n\n  splitSegment (splitTree, segment, offset) {\n    const suffix = splitTree.splitSegment(segment, offset)\n    this.documentTree.splitSegment(segment, suffix)\n    return [segment, suffix]\n  }\n\n  findSegment (position, preferStart) {\n    let {segment, start, end} = this.documentTree.findSegmentContainingPosition(position)\n    let offset = traverse(segment.offset, traversal(position, start))\n    if (preferStart && compare(position, end) === 0) {\n      segment = this.documentTree.getSuccessor(segment)\n      offset = segment.offset\n    }\n    return {segment, offset}\n  }\n\n  findSegmentStart (spliceId, offset) {\n    const splitTree = this.splitTreesBySpliceId.get(spliceIdToString(spliceId))\n    const segment = splitTree.findSegmentContainingOffset(offset)\n    const segmentEndOffset = traverse(segment.offset, segment.extent)\n    if (compare(segment.offset, offset) === 0) {\n      return segment\n    } else if (compare(segmentEndOffset, offset) === 0) {\n      return segment.nextSplit\n    } else {\n      const [, suffix] = this.splitSegment(splitTree, segment, traversal(offset, segment.offset))\n      return suffix\n    }\n  }\n\n  findSegmentEnd (spliceId, offset) {\n    const splitTree = this.splitTreesBySpliceId.get(spliceIdToString(spliceId))\n    const segment = splitTree.findSegmentContainingOffset(offset)\n    const segmentEndOffset = traverse(segment.offset, segment.extent)\n    if (compare(segmentEndOffset, offset) === 0) {\n      return segment\n    } else {\n      const [prefix] = this.splitSegment(splitTree, segment, traversal(offset, segment.offset))\n      return prefix\n    }\n  }\n\n  /*\n  Public: Gets the text of the Document.\n\n  Returns {String}\n  */\n  getText () {\n    let text = ''\n    const segments = this.documentTree.getSegments()\n    for (var i = 0; i < segments.length; i++) {\n      const segment = segments[i]\n      if (this.isSegmentVisible(segment)) text += segment.text\n    }\n    return text\n  }\n\n  collectSegments (spliceIdString, segments, segmentIndices, segmentStartPositions) {\n    const insertionSplitTree = this.splitTreesBySpliceId.get(spliceIdString)\n    if (insertionSplitTree) {\n      let segment = insertionSplitTree.getStart()\n      while (segment) {\n        if (segments) {\n          segments.add(segment)\n        } else {\n          segmentStartPositions.set(segment, this.documentTree.getSegmentPosition(segment))\n          segmentIndices.set(segment, this.documentTree.getSegmentIndex(segment))\n        }\n        segment = insertionSplitTree.getSuccessor(segment)\n      }\n    }\n\n    const deletion = this.deletionsBySpliceId.get(spliceIdString)\n    if (deletion) {\n      const {\n        leftDependencyId, offsetInLeftDependency,\n        rightDependencyId, offsetInRightDependency,\n        maxSeqsBySite\n      } = deletion\n\n      const left = this.findSegmentStart(leftDependencyId, offsetInLeftDependency)\n      const right = this.findSegmentEnd(rightDependencyId, offsetInRightDependency)\n      let segment = left\n      while (true) {\n        const maxSeq = maxSeqsBySite[segment.spliceId.site] || 0\n        if (segment.spliceId.seq <= maxSeq) {\n          if (segments) {\n            segments.add(segment)\n          } else {\n            segmentStartPositions.set(segment, this.documentTree.getSegmentPosition(segment))\n            segmentIndices.set(segment, this.documentTree.getSegmentIndex(segment))\n          }\n        }\n\n        if (segment === right) break\n        segment = this.documentTree.getSuccessor(segment)\n      }\n    }\n  }\n\n  computeChangesForSegments (segmentIndices, segmentStartPositions, oldUndoCounts, newOperations) {\n    const orderedSegments = Array.from(segmentIndices.keys()).sort((s1, s2) => {\n      return segmentIndices.get(s1) - segmentIndices.get(s2)\n    })\n\n    const changes = []\n\n    let lastChange\n    for (let i = 0; i < orderedSegments.length; i++) {\n      const segment = orderedSegments[i]\n      const visibleBefore = this.isSegmentVisible(segment, oldUndoCounts, newOperations)\n      const visibleAfter = this.isSegmentVisible(segment)\n\n      if (visibleBefore !== visibleAfter) {\n        const segmentNewStart = segmentStartPositions.get(segment)\n        const segmentOldStart =\n          lastChange\n          ? traverse(lastChange.oldEnd, traversal(segmentNewStart, lastChange.newEnd))\n          : segmentNewStart\n\n        if (visibleBefore) {\n          if (changes.length > 0 && compare(lastChange.newEnd, segmentNewStart) === 0) {\n            lastChange.oldEnd = traverse(lastChange.oldEnd, segment.extent)\n            lastChange.oldText += segment.text\n          } else {\n            lastChange = {\n              oldStart: segmentOldStart,\n              oldEnd: traverse(segmentOldStart, segment.extent),\n              oldText: segment.text,\n              newStart: segmentNewStart,\n              newEnd: segmentNewStart,\n              newText: ''\n            }\n            changes.push(lastChange)\n          }\n        } else {\n          if (lastChange && compare(lastChange.newEnd, segmentNewStart) === 0) {\n            lastChange.newEnd = traverse(lastChange.newEnd, segment.extent)\n            lastChange.newText += segment.text\n          } else {\n            lastChange = {\n              oldStart: segmentOldStart,\n              oldEnd: segmentOldStart,\n              oldText: '',\n              newStart: segmentNewStart,\n              newEnd: traverse(segmentNewStart, segment.extent),\n              newText: segment.text\n            }\n            changes.push(lastChange)\n          }\n        }\n      }\n    }\n\n    return changes\n  }\n\n  isSegmentVisible (segment, undoCountOverrides, operationsToIgnore) {\n    const spliceIdString = spliceIdToString(segment.spliceId)\n\n    if (operationsToIgnore && operationsToIgnore.has(spliceIdString)) {\n      return false\n    }\n\n    let undoCount\n    if (undoCountOverrides) {\n      undoCount = undoCountOverrides.get(spliceIdString)\n    }\n    if (undoCount == null) {\n      undoCount = this.undoCountsBySpliceId.get(spliceIdString) || 0\n    }\n\n    return (\n      (undoCount & 1) === 0 &&\n      !this.isSegmentDeleted(segment, undoCountOverrides, operationsToIgnore)\n    )\n  }\n\n  isSegmentDeleted (segment, undoCountOverrides, operationsToIgnore) {\n    for (const deletionSpliceIdString of segment.deletions) {\n      if (operationsToIgnore && operationsToIgnore.has(deletionSpliceIdString)) {\n        continue\n      }\n\n      let deletionUndoCount\n      if (undoCountOverrides) {\n        deletionUndoCount = undoCountOverrides.get(deletionSpliceIdString)\n      }\n      if (deletionUndoCount == null) {\n        deletionUndoCount = this.undoCountsBySpliceId.get(deletionSpliceIdString) || 0\n      }\n\n      if ((deletionUndoCount & 1) === 0) return true\n    }\n    return false\n  }\n\n  updateMaxSeqsBySite ({site, seq}) {\n    const previousSeq = this.maxSeqsBySite[site] || 0\n    assert.equal(previousSeq, seq - 1, 'Operations from a given site must be applied in order.')\n    this.maxSeqsBySite[site] = seq\n    if (this.siteId === site) this.nextSequenceNumber = seq + 1\n  }\n}\n\nfunction spliceIdToString ({site, seq}) {\n  return site + '.' + seq\n}\n\nfunction isEmptyLogicalRange ({startDependencyId, offsetInStartDependency, endDependencyId, offsetInEndDependency}) {\n  return (\n    spliceIdsEqual(startDependencyId, endDependencyId) &&\n    compare(offsetInStartDependency, offsetInEndDependency) === 0\n  )\n}\n\nfunction spliceIdsEqual (a, b) {\n  return a.site === b.site && a.seq === b.seq\n}\n\nfunction invertTextUpdates (textUpdates) {\n  const invertedTextUpdates = []\n  for (let i = 0; i < textUpdates.length; i++) {\n    const {oldStart, oldEnd, oldText, newStart, newEnd, newText} = textUpdates[i]\n    invertedTextUpdates.push({\n      oldStart: newStart,\n      oldEnd: newEnd,\n      oldText: newText,\n      newStart: oldStart,\n      newEnd: oldEnd,\n      newText: oldText\n    })\n  }\n  return invertedTextUpdates\n}\n\nclass Checkpoint {\n  constructor (id, isBarrier, markersSnapshot) {\n    this.id = id\n    this.isBarrier = isBarrier\n    this.markersSnapshot = markersSnapshot\n  }\n}\n\nclass Transaction {\n  constructor (timestamp, operations, markersSnapshotBefore, markersSnapshotAfter) {\n    this.timestamp = timestamp\n    this.operations = operations\n    this.markersSnapshotBefore = markersSnapshotBefore\n    this.markersSnapshotAfter = markersSnapshotAfter\n  }\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/lib/document.js?");

/***/ }),

/***/ "./src/teletype-crdt/lib/point-helpers.js":
/*!************************************************!*\
  !*** ./src/teletype-crdt/lib/point-helpers.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const assert = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\")\n\nexports.ZERO_POINT = Object.freeze({row: 0, column: 0})\n\nexports.compare = function (a, b) {\n  return primitiveCompare(a.row, a.column, b.row, b.column)\n}\n\nfunction primitiveCompare (rowA, columnA, rowB, columnB) {\n  if (rowA === rowB) {\n    return columnA - columnB\n  } else {\n    return rowA - rowB\n  }\n}\n\nexports.traverse = function (start, distance) {\n  if (distance.row === 0)\n    return {row: start.row, column: start.column + distance.column}\n  else {\n    return {row: start.row + distance.row, column: distance.column}\n  }\n}\n\nexports.traversal = function (end, start) {\n  if (end.row === start.row) {\n    return {row: 0, column: end.column - start.column}\n  } else {\n    return {row: end.row - start.row, column: end.column}\n  }\n}\n\nexports.extentForText = function (text) {\n  let row = 0\n  let column = 0\n  let index = 0\n  while (index < text.length) {\n    const char = text[index]\n    if (char === '\\n') {\n      column = 0\n      row++\n    } else {\n      column++\n    }\n    index++\n  }\n\n  return {row, column}\n}\n\nexports.characterIndexForPosition = function (text, target) {\n  // Previously we instantiated a point object here and mutated its fields, so\n  // that we could use the `compare` function we already export. However, this\n  // seems to trigger a weird optimization bug on v8 5.6.326.50 which causes\n  // this function to return unpredictable results, so we use primitive-valued\n  // variables instead.\n  let row = 0\n  let column = 0\n  let index = 0\n  while (primitiveCompare(row, column, target.row, target.column) < 0 && index <= text.length) {\n    if (text[index] === '\\n') {\n      row++\n      column = 0\n    } else {\n      column++\n    }\n\n    index++\n  }\n\n  assert(primitiveCompare(row, column, target.row, target.column) <= 0, 'Target position should not exceed the extent of the given text')\n\n  return index\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/lib/point-helpers.js?");

/***/ }),

/***/ "./src/teletype-crdt/lib/splay-tree.js":
/*!*********************************************!*\
  !*** ./src/teletype-crdt/lib/splay-tree.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports =\nclass SplayTree {\n  splayNode (node) {\n    if (!node) return\n\n    while (true) {\n      if (this.isNodeLeftChild(this.getParent(node)) && this.isNodeRightChild(node)) { // zig-zag\n        this.rotateNodeLeft(node)\n        this.rotateNodeRight(node)\n      } else if (this.isNodeRightChild(this.getParent(node)) && this.isNodeLeftChild(node)) { // zig-zag\n        this.rotateNodeRight(node)\n        this.rotateNodeLeft(node)\n      } else if (this.isNodeLeftChild(this.getParent(node)) && this.isNodeLeftChild(node)) { // zig-zig\n        this.rotateNodeRight(this.getParent(node))\n        this.rotateNodeRight(node)\n      } else if (this.isNodeRightChild(this.getParent(node)) && this.isNodeRightChild(node)) { // zig-zig\n        this.rotateNodeLeft(this.getParent(node))\n        this.rotateNodeLeft(node)\n      } else { // zig\n        if (this.isNodeLeftChild(node)) {\n          this.rotateNodeRight(node)\n        } else if (this.isNodeRightChild(node)) {\n          this.rotateNodeLeft(node)\n        }\n\n        return\n      }\n    }\n  }\n\n  rotateNodeLeft (pivot) {\n    const root = this.getParent(pivot)\n    if (this.getParent(root)) {\n      if (root === this.getLeft(this.getParent(root))) {\n        this.setLeft(this.getParent(root), pivot)\n      } else {\n        this.setRight(this.getParent(root), pivot)\n      }\n    } else {\n      this.root = pivot\n    }\n    this.setParent(pivot, this.getParent(root))\n\n    this.setRight(root, this.getLeft(pivot))\n    if (this.getRight(root)) this.setParent(this.getRight(root), root)\n\n    this.setLeft(pivot, root)\n    this.setParent(this.getLeft(pivot), pivot)\n\n    this.updateSubtreeExtent(root)\n    this.updateSubtreeExtent(pivot)\n  }\n\n  rotateNodeRight (pivot) {\n    const root = this.getParent(pivot)\n    if (this.getParent(root)) {\n      if (root === this.getLeft(this.getParent(root))) {\n        this.setLeft(this.getParent(root), pivot)\n      } else {\n        this.setRight(this.getParent(root), pivot)\n      }\n    } else {\n      this.root = pivot\n    }\n    this.setParent(pivot, this.getParent(root))\n\n    this.setLeft(root, this.getRight(pivot))\n    if (this.getLeft(root)) this.setParent(this.getLeft(root), root)\n\n    this.setRight(pivot, root)\n    this.setParent(this.getRight(pivot), pivot)\n\n    this.updateSubtreeExtent(root)\n    this.updateSubtreeExtent(pivot)\n  }\n\n  isNodeLeftChild (node) {\n    return node != null && this.getParent(node) != null && this.getLeft(this.getParent(node)) === node\n  }\n\n  isNodeRightChild (node) {\n    return node != null && this.getParent(node) != null && this.getRight(this.getParent(node)) === node\n  }\n\n  getSuccessor (node) {\n    if (this.getRight(node)) {\n      node = this.getRight(node)\n      while (this.getLeft(node)) {\n        node = this.getLeft(node)\n      }\n    } else {\n      while (this.getParent(node) && this.getRight(this.getParent(node)) === node) {\n        node = this.getParent(node)\n      }\n      node = this.getParent(node)\n    }\n    return node\n  }\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/lib/splay-tree.js?");

/***/ }),

/***/ "./src/teletype-crdt/lib/split-tree.js":
/*!*********************************************!*\
  !*** ./src/teletype-crdt/lib/split-tree.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const SplayTree = __webpack_require__(/*! ./splay-tree */ \"./src/teletype-crdt/lib/splay-tree.js\")\nconst {ZERO_POINT, compare, traverse, traversal, characterIndexForPosition} = __webpack_require__(/*! ./point-helpers */ \"./src/teletype-crdt/lib/point-helpers.js\")\n\nmodule.exports =\nclass SplitTree extends SplayTree {\n  constructor (segment) {\n    super()\n    this.startSegment = segment\n    this.startSegment.splitLeft = null\n    this.startSegment.splitRight = null\n    this.startSegment.splitParent = null\n    this.startSegment.splitSubtreeExtent = this.startSegment.extent\n    this.root = this.startSegment\n  }\n\n  getStart () {\n    return this.startSegment\n  }\n\n  getParent (node) {\n    return node.splitParent\n  }\n\n  setParent (node, value) {\n    node.splitParent = value\n  }\n\n  getLeft (node) {\n    return node.splitLeft\n  }\n\n  setLeft (node, value) {\n    node.splitLeft = value\n  }\n\n  getRight (node) {\n    return node.splitRight\n  }\n\n  setRight (node, value) {\n    node.splitRight = value\n  }\n\n  updateSubtreeExtent (node) {\n    node.splitSubtreeExtent = ZERO_POINT\n    if (node.splitLeft) node.splitSubtreeExtent = traverse(node.splitSubtreeExtent, node.splitLeft.splitSubtreeExtent)\n    node.splitSubtreeExtent = traverse(node.splitSubtreeExtent, node.extent)\n    if (node.splitRight) node.splitSubtreeExtent = traverse(node.splitSubtreeExtent, node.splitRight.splitSubtreeExtent)\n  }\n\n  findSegmentContainingOffset (offset) {\n    let segment = this.root\n    let leftAncestorEnd = ZERO_POINT\n    while (segment) {\n      let start = leftAncestorEnd\n      if (segment.splitLeft) start = traverse(start, segment.splitLeft.splitSubtreeExtent)\n      const end = traverse(start, segment.extent)\n\n      if (compare(offset, start) <= 0 && segment.splitLeft) {\n        segment = segment.splitLeft\n      } else if (compare(offset, end) > 0) {\n        leftAncestorEnd = end\n        segment = segment.splitRight\n      } else {\n        this.splayNode(segment)\n        return segment\n      }\n    }\n\n    throw new Error('No segment found')\n  }\n\n  splitSegment (segment, offset) {\n    const splitIndex = characterIndexForPosition(segment.text, offset)\n\n    this.splayNode(segment)\n    const suffix = Object.assign({}, segment)\n    suffix.text = segment.text.slice(splitIndex)\n    suffix.extent = traversal(segment.extent, offset)\n\n    suffix.spliceId = Object.assign({}, segment.spliceId)\n    suffix.offset = traverse(suffix.offset, offset)\n    suffix.deletions = new Set(suffix.deletions)\n    segment.text = segment.text.slice(0, splitIndex)\n    segment.extent = offset\n    segment.nextSplit = suffix\n\n    this.root = suffix\n    suffix.splitParent = null\n    suffix.splitLeft = segment\n    segment.splitParent = suffix\n    suffix.splitRight = segment.splitRight\n    if (suffix.splitRight) suffix.splitRight.splitParent = suffix\n    segment.splitRight = null\n\n    this.updateSubtreeExtent(segment)\n    this.updateSubtreeExtent(suffix)\n\n    return suffix\n  }\n\n  getSuccessor (segment) {\n    return segment.nextSplit\n  }\n\n  getSegments () {\n    const segments = []\n    let segment = this.getStart()\n    while (segment) {\n      segments.push(segment)\n      segment = segment.nextSplit\n    }\n    return segments\n  }\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/lib/split-tree.js?");

/***/ }),

/***/ "./src/teletype-crdt/test/helpers/local-document.js":
/*!**********************************************************!*\
  !*** ./src/teletype-crdt/test/helpers/local-document.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const assert = __webpack_require__(/*! assert */ \"./node_modules/assert/assert.js\")\nconst {\n  ZERO_POINT, characterIndexForPosition, extentForText, compare, traverse, traversal\n} = __webpack_require__(/*! ../../lib/point-helpers */ \"./src/teletype-crdt/lib/point-helpers.js\")\n\nmodule.exports =\nclass LocalDocument {\n  constructor (text) {\n    this.text = text\n    this.markers = {}\n  }\n\n  updateText (changes) {\n    for (let i = changes.length - 1; i >= 0; i--) {\n      const {oldStart, oldEnd, newText} = changes[i]\n      this.setTextInRange(oldStart, oldEnd, newText)\n    }\n  }\n\n  updateMarkers (updatesBySiteId) {\n    for (const siteId in updatesBySiteId) {\n      let layersById = this.markers[siteId]\n      if (!layersById) {\n        layersById = {}\n        this.markers[siteId] = layersById\n      }\n\n      const updatesByLayerId = updatesBySiteId[siteId]\n      for (const layerId in updatesByLayerId) {\n        const updatesByMarkerId = updatesByLayerId[layerId]\n\n        if (updatesByMarkerId === null) {\n          assert(layersById[layerId], 'Layer should exist')\n          delete layersById[layerId]\n        } else {\n          let markersById = layersById[layerId]\n          if (!markersById) {\n            markersById = {}\n            layersById[layerId] = markersById\n          }\n\n          for (const markerId in updatesByMarkerId) {\n            const markerUpdate = updatesByMarkerId[markerId]\n            if (markerUpdate === null) {\n              assert(markersById[markerId], 'Marker should exist')\n              delete markersById[markerId]\n            } else {\n              const marker = Object.assign({}, markerUpdate)\n              marker.range = Object.assign({}, marker.range)\n              markersById[markerId] = marker\n            }\n          }\n        }\n      }\n    }\n  }\n\n  setTextInRange (oldStart, oldEnd, text) {\n    if (compare(oldEnd, oldStart) > 0) {\n      this.delete(oldStart, oldEnd)\n    }\n\n    if (text.length > 0) {\n      this.insert(oldStart, text)\n    }\n\n    this.spliceMarkers(oldStart, oldEnd, traverse(oldStart, extentForText(text)))\n  }\n\n  spliceMarkers (oldStart, oldEnd, newEnd) {\n    const isInsertion = compare(oldStart, oldEnd) === 0\n\n\n    for (const siteId in this.markers) {\n      const layersById = this.markers[siteId]\n      for (const layerId in layersById) {\n        const markersById = layersById[layerId]\n        for (const markerId in markersById) {\n          const {range, exclusive} = markersById[markerId]\n          const rangeIsEmpty = compare(range.start, range.end) === 0\n\n          const moveMarkerStart = (\n            compare(oldStart, range.start) < 0 ||\n            (\n              exclusive &&\n              (!rangeIsEmpty || isInsertion) &&\n              compare(oldStart, range.start) === 0\n            )\n          )\n\n          const moveMarkerEnd = (\n            moveMarkerStart ||\n            (compare(oldStart, range.end) < 0) ||\n            (!exclusive && compare(oldEnd, range.end) === 0)\n          )\n\n          if (moveMarkerStart) {\n            if (compare(oldEnd, range.start) <= 0) { // splice precedes marker start\n              range.start = traverse(newEnd, traversal(range.start, oldEnd))\n            } else { // splice surrounds marker start\n              range.start = newEnd\n            }\n          }\n\n          if (moveMarkerEnd) {\n            if (compare(oldEnd, range.end) <= 0) { // splice precedes marker end\n              range.end = traverse(newEnd, traversal(range.end, oldEnd))\n            } else { // splice surrounds marker end\n              range.end = newEnd\n            }\n          }\n        }\n      }\n    }\n  }\n\n  insert (position, text) {\n    const index = characterIndexForPosition(this.text, position)\n    this.text = this.text.slice(0, index) + text + this.text.slice(index)\n  }\n\n  delete (startPosition, endPosition) {\n    const textExtent = extentForText(this.text)\n    assert(compare(startPosition, textExtent) < 0)\n    assert(compare(endPosition, textExtent) <= 0)\n    const startIndex = characterIndexForPosition(this.text, startPosition)\n    const endIndex = characterIndexForPosition(this.text, endPosition)\n    this.text = this.text.slice(0, startIndex) + this.text.slice(endIndex)\n  }\n\n  lineForRow (row) {\n    const startIndex = characterIndexForPosition(this.text, {row, column: 0})\n    const endIndex = characterIndexForPosition(this.text, {row: row + 1, column: 0}) - 1\n    return this.text.slice(startIndex, endIndex)\n  }\n\n  getLineCount () {\n    return extentForText(this.text).row + 1\n  }\n\n  getTextInRange (start, end) {\n    const startIndex = characterIndexForPosition(this.text, start)\n    const endIndex = characterIndexForPosition(this.text, end)\n    return this.text.slice(startIndex, endIndex)\n  }\n}\n\n\n//# sourceURL=webpack:///./src/teletype-crdt/test/helpers/local-document.js?");

/***/ })

/******/ });